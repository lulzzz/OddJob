{
"version": 3,
"sourceRoot": "Source",
"sources": ["GlutenFree.OddJob.Manager.Presentation.WS/Client.cs", "GlutenFree.OddJob.Manager.Presentation.WS/JobItem.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/JobParameter.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/JobSearch.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/Main.g.cs"],
"sourcesContent": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Web;\nusing GlutenFree.OddJob.Manager.Presentation.WS.Template;\nusing GlutenFree.OddJob.Storage.SQL.Common.DbDtos;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.JavaScript;\nusing WebSharper.Sitelets;\nusing WebSharper.UI;\nusing WebSharper.UI.Client;\nusing static WebSharper.UI.Client.Html;\nusing Html = WebSharper.UI.Client.Html;\n\nnamespace GlutenFree.OddJob.Manager.Presentation.WS\n{\n    [JavaScript]\n    public static class JobSearchClient\n    {\n        public static IControlBody Main()\n        {\n            var jobs = new ListModel<Guid, JobSearchCriteria>(job => job.JobGuid.GetValueOrDefault(Guid.Empty));\n            var criteria = Var.Create(new JobSearchCriteria());\n            var testList = new ListModel<string, string>(s => s);\n            var submit = Submitter.CreateOption(criteria.View);\n            var results = submit.View.MapAsync(async input =>\n            {\n                if (input == null)\n                    return div(\"\");\n                var future = Remoting.SearchCriteria(input.Value.QueueName, input.Value.MethodName);\n                var awaitedFuture = await future;\n                //awaitedFuture.Select(q => new Jobitem.JobItem().MethodName(q.MethodName).QueueName(q.Queue).Doc());\n                var result = awaitedFuture.Select(q => new Jobitem.JobItem().MethodName(q.MethodName).QueueName(q.Queue).Status(q.Status).JobGuid(q.JobId.ToString())\n                    .JobParameter(\n                        ul(q.JobArgs.Select((r, i) =>\n                            new Jobparameter.JobParameter().Type(r.Type).Name(r.Name).Value(r.Value)\n                                .Ordinal(i.ToString()).Doc()).ToArray())).Doc()\n                ).ToArray(); //WebSharper.TypedJson.Serialize(awaitedFuture);\n                return div(h3(\"Results:\"),br(), doc(ul(result)));\n            });\n\n            var var1 = criteria.Lens(q => q.QueueName, (a, b) =>\n            {\n                a.QueueName = b;\n                return a;\n            });\n            var var2 = criteria.Lens(q => q.MethodName, (a, b) =>\n            {\n                a.MethodName = b;\n                return a;\n            });\n            var content = div(\n                    div(\"Queue Name: \",input(var1, attr.name(\"queueName\"))),\n                    div(\"Method Name: \",input(var2, attr.name(\"methodName\"))),\n                    button(\"Search\", submit.Trigger),\n                    div(results)\n                );\n                \n\n                /*new Jobsearch.Main()\n                    .SearchMethodName(var1)\n                    .SearchQueueName(var2)\n                    .Search(x => { testList.View.MapAsync(input=> Remoting.SearchCriteria(var1.Value, var2.Value)); }).Doc());*/\n            return content;\n        }\n    }\n    [JavaScript]\n    public static class Client\n    {\n        static public IControlBody Main()\n        {\n\n            var rvInput = Var.Create(new JobSearchCriteria());\n            var submit = Submitter.CreateOption(rvInput.View);\n            var vReversed =\n                submit.View.MapAsync(input =>\n                {\n                    if (input == null)\n                        return Task.FromResult(\"\");\n                    return Remoting.DoSomething(input.Value);\n                });\n            return div(\n                input(rvInput),\n                button(\"Send\", submit.Trigger),\n                hr(),\n                h4(\n                    attr.@class(\"text-muted\"),\n                    \"The server responded:\",\n                    div(\n                        attr.@class(\"jumbotron\"),\n                        h1(vReversed)\n                    )\n                )\n            );\n        }\n        /*static public IControlBody Main()\n        {\n            var rvInput = Var.Create(\"\");\n            var submit = Submitter.CreateOption(rvInput.View);\n            var vReversed =\n                submit.View.MapAsync(input =>\n                {\n                    if (input == null)\n                        return Task.FromResult(\"\");\n                    return Remoting.DoSomething(input.Value);\n                });\n            return div(\n                input(rvInput),\n                button(\"Send\", submit.Trigger),\n                hr(),\n                h4(\n                    attr.@class(\"text-muted\"),\n                    \"The server responded:\",\n                    div(\n                        attr.@class(\"jumbotron\"),\n                        h1(vReversed)\n                    )\n                )\n            );\n        }*/\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Jobitem\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobitem\", null, FSharpOption<string>.Some(\"JobItem.html\"), \"<!-- ClientLoad = Inline -->\\r\\n\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        public class JobItem\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public JobItem JobGuid(string x) { holes.Add(TemplateHole.NewText(\"jobguid\", x)); return this; }\n            public JobItem JobGuid(View<string> x) { holes.Add(TemplateHole.NewTextView(\"jobguid\", x)); return this; }\n            public JobItem MethodName(string x) { holes.Add(TemplateHole.NewText(\"methodname\", x)); return this; }\n            public JobItem MethodName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"methodname\", x)); return this; }\n            public JobItem QueueName(string x) { holes.Add(TemplateHole.NewText(\"queuename\", x)); return this; }\n            public JobItem QueueName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"queuename\", x)); return this; }\n            public JobItem Status(string x) { holes.Add(TemplateHole.NewText(\"status\", x)); return this; }\n            public JobItem Status(View<string> x) { holes.Add(TemplateHole.NewTextView(\"status\", x)); return this; }\n            public JobItem JobParameter(Doc x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", x)); return this; }\n            public JobItem JobParameter(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", SDoc.Concat(x))); return this; }\n            public JobItem JobParameter(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", SDoc.Concat(x))); return this; }\n            public JobItem JobParameter(string x) { holes.Add(TemplateHole.NewText(\"jobparameter\", x)); return this; }\n            public JobItem JobParameter(View<string> x) { holes.Add(TemplateHole.NewTextView(\"jobparameter\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobitem\", FSharpOption<string>.Some(\"jobitem\"), FSharpOption<string>.Some(\"JobItem.html\"), \"<li>\\r\\n    <div class=\\\"Jobs\\\">\\r\\n        <div>JobGuid: <input value=\\\"${JobGuid}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div>MethodName: <input value=\\\"${MethodName}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"> </div>\\r\\n        <div>QueueName: <input value=\\\"${QueueName}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div>Status: <input value=\\\"${Status}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div ws-hole=\\\"JobParameter\\\"></div>\\r\\n    </div>\\r\\n</li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Jobparameter\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobparameter\", null, FSharpOption<string>.Some(\"JobParameter.html\"), \"<!-- ClientLoad = Inline -->\\r\\n\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        public class JobParameter\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public JobParameter Ordinal(string x) { holes.Add(TemplateHole.NewText(\"ordinal\", x)); return this; }\n            public JobParameter Ordinal(View<string> x) { holes.Add(TemplateHole.NewTextView(\"ordinal\", x)); return this; }\n            public JobParameter Name(string x) { holes.Add(TemplateHole.NewText(\"name\", x)); return this; }\n            public JobParameter Name(View<string> x) { holes.Add(TemplateHole.NewTextView(\"name\", x)); return this; }\n            public JobParameter Type(string x) { holes.Add(TemplateHole.NewText(\"type\", x)); return this; }\n            public JobParameter Type(View<string> x) { holes.Add(TemplateHole.NewTextView(\"type\", x)); return this; }\n            public JobParameter Value(string x) { holes.Add(TemplateHole.NewText(\"value\", x)); return this; }\n            public JobParameter Value(View<string> x) { holes.Add(TemplateHole.NewTextView(\"value\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobparameter\", FSharpOption<string>.Some(\"jobparameter\"), FSharpOption<string>.Some(\"JobParameter.html\"), \"<li>\\r\\n    <div class=\\\"JobParameter\\\">\\r\\n        <div>Ordinal : <input readonly=\\\"readonly\\\" value=\\\"${Ordinal}\\\"> </div> <div>Name: <input value=\\\"${Name}\\\" readonly=\\\"readonly\\\"> </div> <div>Type: <input value=\\\"${Type}\\\" readonly=\\\"readonly\\\"> </div> <div>Value: <input value=\\\"${Value}\\\" readonly=\\\"readonly\\\"></div>\\r\\n    </div>\\r\\n</li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Jobsearch\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobsearch\", null, FSharpOption<string>.Some(\"JobSearch.html\"), \"<html lang=\\\"en\\\">\\r\\n<body>\\r\\n    <div style=\\\"width: 400px\\\">\\r\\n        <h1>My TODO list</h1>\\r\\n        <div id=\\\"search\\\"></div>\\r\\n        <div style=\\\"display: none\\\"></div>\\r\\n    </div>\\r\\n</body>\\r\\n</html>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        [Inline] public Elt Elt() => (Elt)Doc();\n        public class ListItem\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public ListItem ShowDone(Attr x) { holes.Add(TemplateHole.NewAttribute(\"showdone\", x)); return this; }\n            public ListItem ShowDone(IEnumerable<Attr> x) { holes.Add(TemplateHole.NewAttribute(\"showdone\", Attr.Concat(x))); return this; }\n            public ListItem ShowDone(params Attr[] x) { holes.Add(TemplateHole.NewAttribute(\"showdone\", Attr.Concat(x))); return this; }\n            public ListItem Job(string x) { holes.Add(TemplateHole.NewText(\"job\", x)); return this; }\n            public ListItem Job(View<string> x) { holes.Add(TemplateHole.NewTextView(\"job\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobsearch\", FSharpOption<string>.Some(\"listitem\"), FSharpOption<string>.Some(\"JobSearch.html\"), \"<li>\\r\\n                    <div class=\\\"checkbox\\\">\\r\\n                        <label ws-attr=\\\"ShowDone\\\">\\r\\n                            <!--<input type=\\\"checkbox\\\" ws-var=\\\"Done\\\" />-->\\r\\n                            ${Job}\\r\\n                            <!--<button class=\\\"btn btn-danger btn-xs pull-right\\\" type=\\\"button\\\" ws-onclick=\\\"Clear\\\">X</button>-->\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n        public class Main\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public Main ListContainer(Doc x) { holes.Add(TemplateHole.NewElt(\"listcontainer\", x)); return this; }\n            public Main ListContainer(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"listcontainer\", SDoc.Concat(x))); return this; }\n            public Main ListContainer(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"listcontainer\", SDoc.Concat(x))); return this; }\n            public Main ListContainer(string x) { holes.Add(TemplateHole.NewText(\"listcontainer\", x)); return this; }\n            public Main ListContainer(View<string> x) { holes.Add(TemplateHole.NewTextView(\"listcontainer\", x)); return this; }\n            public Main SearchQueueName(Var<string> x) { holes.Add(TemplateHole.NewVarStr(\"searchqueuename\", x)); return this; }\n            public Main SearchMethodName(Var<string> x) { holes.Add(TemplateHole.NewVarStr(\"searchmethodname\", x)); return this; }\n            public Main Search(Action<DomElement, WebSharper.JavaScript.Dom.MouseEvent> x) { holes.Add(TemplateHole.NewActionEvent(\"search\", x)); return this; }\n            public Main Search(Action x) { holes.Add(TemplateHole.NewEvent(\"search\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x()))); return this; }\n            public Main Search(Action<WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>> x) { holes.Add(TemplateHole.NewEvent(\"search\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x(new WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>(new Vars(instance), a, (WebSharper.JavaScript.Dom.MouseEvent)b))))); return this; }\n            public Main NewTaskName(string x) { holes.Add(TemplateHole.NewText(\"newtaskname\", x)); return this; }\n            public Main NewTaskName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"newtaskname\", x)); return this; }\n            public Main Clear(Action<DomElement, WebSharper.JavaScript.Dom.MouseEvent> x) { holes.Add(TemplateHole.NewActionEvent(\"clear\", x)); return this; }\n            public Main Clear(Action x) { holes.Add(TemplateHole.NewEvent(\"clear\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x()))); return this; }\n            public Main Clear(Action<WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>> x) { holes.Add(TemplateHole.NewEvent(\"clear\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x(new WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>(new Vars(instance), a, (WebSharper.JavaScript.Dom.MouseEvent)b))))); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n                [Inline] public Var<string> SearchQueueName => (Var<string>)TemplateHole.Value(instance.Hole(\"searchqueuename\"));\n                [Inline] public Var<string> SearchMethodName => (Var<string>)TemplateHole.Value(instance.Hole(\"searchmethodname\"));\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] { Tuple.Create(\"searchqueuename\", WebSharper.UI.Templating.Runtime.Server.ValTy.String), Tuple.Create(\"searchmethodname\", WebSharper.UI.Templating.Runtime.Server.ValTy.String) });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobsearch\", FSharpOption<string>.Some(\"main\"), FSharpOption<string>.Some(\"JobSearch.html\"), \"\\r\\n            <ul class=\\\"list-unstyled\\\" ws-hole=\\\"ListContainer\\\">\\r\\n                \\r\\n            </ul>\\r\\n            <form onsubmit=\\\"return false\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label>New task</label>\\r\\n                    <div class=\\\"input-group\\\">\\r\\n                        <input class=\\\"form-control\\\" ws-var=\\\"SearchQueueName\\\">\\r\\n                        <input class=\\\"form-control\\\" ws-var=\\\"SearchMethodName\\\">\\r\\n                        <span class=\\\"input-group-btn\\\">\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ws-onclick=\\\"Search\\\">Search</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                    <p class=\\\"help-block\\\">You are going to add: ${NewTaskName}<span></span></p>\\r\\n                </div>\\r\\n                <button class=\\\"btn btn-default\\\" type=\\\"button\\\" ws-onclick=\\\"Clear\\\">Clear Criteria</button>\\r\\n            </form>\\r\\n        \", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n        }\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Main\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public Main Title(string x) { holes.Add(TemplateHole.NewText(\"title\", x)); return this; }\n        public Main Title(View<string> x) { holes.Add(TemplateHole.NewTextView(\"title\", x)); return this; }\n        public Main MenuBar(Doc x) { holes.Add(TemplateHole.NewElt(\"menubar\", x)); return this; }\n        public Main MenuBar(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"menubar\", SDoc.Concat(x))); return this; }\n        public Main MenuBar(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"menubar\", SDoc.Concat(x))); return this; }\n        public Main MenuBar(string x) { holes.Add(TemplateHole.NewText(\"menubar\", x)); return this; }\n        public Main MenuBar(View<string> x) { holes.Add(TemplateHole.NewTextView(\"menubar\", x)); return this; }\n        public Main Body(Doc x) { holes.Add(TemplateHole.NewElt(\"body\", x)); return this; }\n        public Main Body(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"body\", SDoc.Concat(x))); return this; }\n        public Main Body(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"body\", SDoc.Concat(x))); return this; }\n        public Main Body(string x) { holes.Add(TemplateHole.NewText(\"body\", x)); return this; }\n        public Main Body(View<string> x) { holes.Add(TemplateHole.NewTextView(\"body\", x)); return this; }\n        public Main scripts(Doc x) { holes.Add(TemplateHole.NewElt(\"scripts\", x)); return this; }\n        public Main scripts(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"scripts\", SDoc.Concat(x))); return this; }\n        public Main scripts(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"scripts\", SDoc.Concat(x))); return this; }\n        public Main scripts(string x) { holes.Add(TemplateHole.NewText(\"scripts\", x)); return this; }\n        public Main scripts(View<string> x) { holes.Add(TemplateHole.NewTextView(\"scripts\", x)); return this; }\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"main\", null, FSharpOption<string>.Some(\"Main.html\"), \"<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>${Title}</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\\\">\\n    <style>\\n        /* Sticky footer styles */\\n        html {\\n            position: relative;\\n            min-height: 100%;\\n        }\\n\\n        body {\\n            /* Margin bottom by footer height */\\n            margin-bottom: 60px;\\n        }\\n\\n        .footer {\\n            position: absolute;\\n            bottom: 0;\\n            width: 100%;\\n            /* Set the fixed height of the footer here */\\n            height: 60px;\\n            background-color: #f5f5f5;\\n        }\\n\\n        .container .text-muted {\\n            margin: 20px 0;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <!-- Static navbar -->\\n    <nav class=\\\"navbar navbar-default navbar-static-top\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"navbar-header\\\">\\n                <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbar\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n                    <span class=\\\"sr-only\\\">Toggle navigation</span>\\n                    <span class=\\\"icon-bar\\\"></span>\\n                    <span class=\\\"icon-bar\\\"></span>\\n                </button>\\n                <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Your App</a>\\n            </div>\\n            <div id=\\\"navbar\\\" class=\\\"navbar-collapse collapse\\\">\\n                <ul class=\\\"nav navbar-nav\\\" ws-hole=\\\"MenuBar\\\"></ul>\\n                <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                    <li><a href=\\\"http://websharper.com\\\">websharper.com</a></li>\\n                </ul>\\n            </div><!--/.nav-collapse -->\\n        </div>\\n    </nav>\\n    <div class=\\\"container\\\">\\n        <div ws-replace=\\\"Body\\\">\\n        </div>\\n    </div>\\n    <footer class=\\\"footer\\\">\\n        <div class=\\\"container\\\">\\n            <p class=\\\"text-muted\\\">\\n                For an enhanced template that provides automatic GitHub deployment to Azure, fork from <a href=\\\"https://github.com/intellifactory/ClientServer.Azure\\\">GitHub</a>, or\\n                read more <a href=\\\"http://websharper.com/blog-entry/4368/deploying-websharper-apps-to-azure-via-github\\\">here</a>.\\n            </p>\\n        </div>\\n    </footer>\\n    <script ws-replace=\\\"scripts\\\"></script>\\n</body>\\n</html>\", null, completed.Item1, FSharpOption<string>.Some(\"main\"), ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        [Inline] public Elt Elt() => (Elt)Doc();\n    }\n}"],
"names": [],
"mappings": "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"
}
