{
"version": 3,
"sourceRoot": "Source",
"sources": ["GlutenFree.OddJob.Manager.Presentation.WS/Client.cs", "GlutenFree.OddJob.Manager.Presentation.WS/JobItem.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/JobParameter.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/JobSearch.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/Main.g.cs", "GlutenFree.OddJob.Manager.Presentation.WS/SearchOption.g.cs"],
"sourcesContent": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Web;\nusing GlutenFree.OddJob.Manager.Presentation.WS.Template;\nusing GlutenFree.OddJob.Storage.SQL.Common.DbDtos;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.JavaScript;\nusing WebSharper.Sitelets;\nusing WebSharper.UI;\nusing WebSharper.UI.Client;\nusing static WebSharper.UI.Client.Html;\nusing Elt = WebSharper.UI.Elt;\nusing Html = WebSharper.UI.Client.Html;\n\nnamespace GlutenFree.OddJob.Manager.Presentation.WS\n{\n    [JavaScript]\n    public static class JSHelpers\n    {\n       public static string DateToString(DateTime date) =>\n            $\"{date.Year}-{date.Month.ToString().PadLeft(2, '0')}-{date.Day.ToString().PadLeft(2, '0')}\";\n\n        public static string TimeToString(DateTime time) =>\n            $\"{time.Hour}:{time.Minute}\";\n    }\n    [JavaScript]\n    public static class JobSearchClient\n    {\n        \n\n        public static Elt TextSearch(string name, Var<string> criteriaLens, Var<bool> useCriteriaLens)\n        {\n            return div(checkbox(useCriteriaLens), name, input(criteriaLens));\n        }\n\n        public static Elt OptionSearch(string name, Var<string> criteriaLens, View<IEnumerable<string>> optionView,\n            Var<bool> useCriteriaLens, Action<WebSharper.JavaScript.Dom.Element,WebSharper.JavaScript.Dom.Event> changeAction)\n        {\n            return div(checkbox(useCriteriaLens), name + \": \", @select(criteriaLens, optionView, (q) => q ?? \"Please Select a \" + name +\"...\"),\n                on.change(changeAction));\n        }\n\n        public static Elt DateRangeSearch(string name, Var<bool> useCriteriaLens,Var<string> beforeLens, Var<string> afterLens)\n        {\n            return (div(checkbox(useCriteriaLens),name + \": \", input(beforeLens, attr.type(\"date\")), input(afterLens,attr.type(\"date\"))));\n        }\n\n        public static Elt DateTimeRangeSearch(string name, Var<bool> useCriteriaLens, Var<string> beforeDateLens, Var<string> beforeTimeLens,\n            Var<string> afterDateLens, Var<string>afterTimeLens)\n        {\n            return (div(style(\"float\", \"left\"),checkbox(useCriteriaLens), name + \": \", br(),\n                div(style(\"float\",\"left\"), ClearableDateInput(beforeDateLens),ClearableTimeInput(beforeTimeLens)),\n                div(style(\"float\", \"left\"),ClearableDateInput(afterDateLens), ClearableTimeInput(afterTimeLens))));\n        }\n\n        public static Elt ClearableDateInput(Var<string> dateLens)\n        {\n            return div(input(dateLens, attr.type(\"date\")), button(\"Clear\", () => dateLens.Value = \"\"));\n        }\n        public static Elt ClearableTimeInput(Var<string> timeLens)\n        {\n            return div(input(timeLens, attr.type(\"time\")), button(\"Clear\", () => timeLens.Value = \"\"));\n        }\n\n        public static IControlBody Main()\n        {\n            \n            //var myList = Var.Create<IEnumerable<string>>(Remoting.GetQueueNameList());\n            var criteria = Var.Create(new JobSearchCriteria());\n            var statusLens = criteria.Lens(q => q.Status, (a, b) =>\n            {\n                a.Status = b;\n                return a;\n            });\n            var useStatus = criteria.Lens(q => q.UseStatus, (a, b) =>\n            {\n                a.UseStatus = b;\n                return a;\n            });\n            var methodLens = criteria.Lens(q => q.MethodName, (a, b) =>\n            {\n                a.MethodName = b;\n                return a;\n            });\n            var useMethod = criteria.Lens(q => q.UseMethod, (a, b) =>\n            {\n                a.UseMethod = b;\n                return a;\n            });\n            var statusOptions = Var.Create<IEnumerable<string>>(new[]\n            {\n                null, \"Processed\", \"New\", \"Failed\",\n                \"Retry\", \"InProgress\", \"Inserting\"\n            });\n            var dummyQueueCriteriaFiller = Var.Create(\"\");\n            var criteriaFiller = Submitter.CreateOption(dummyQueueCriteriaFiller.View);\n\n            var queueNames = Var.Create<IEnumerable<string>>(new string[] {null});\n            var queueNameView = criteriaFiller.View.MapAsync(async input =>\n            {\n                queueNames.Value=  await Remoting.GetQueueNameList();\n                return queueNames.Value;\n            });\n            criteriaFiller.Trigger();\n        var methodCriteria = Var.Create<IEnumerable<string>>(new string[] {null});\n            var submit = Submitter.CreateOption(criteria.View);\n            var results = submit.View.MapAsync(async input =>\n            {\n                if (input == null)\n                    return div(\"\");\n                var methodOptionFuture = Remoting.GetMethods(input.Value.QueueName);\n                var awaitedMethodOptions = await methodOptionFuture;\n                methodCriteria.Value = awaitedMethodOptions;\n                var future = Remoting.SearchCriteria(input.Value);\n                var awaitedFuture = await future;\n                var result = awaitedFuture.Select(q => new Jobitem.JobItem().MethodName(q.MethodName).QueueName(q.Queue).Status(q.Status).JobGuid(q.JobId.ToString())\n                    .JobParameter(\n                        ul(q.JobArgs.Select((r, i) =>\n                            new Jobparameter.JobParameter().Type(r.Type).Name(r.Name).Value(r.Value)\n                                .Ordinal(i.ToString()).Doc()).ToArray())).Doc()\n                ).ToArray();\n                return div(h3(\"Results:\"),br(), doc(ul(result)));\n            });\n\n            var queueNameLens = criteria.Lens(q => q.QueueName, (a, b) =>\n            {\n                a.QueueName = b;\n                return a;\n            });\n            var useCreatedLens = criteria.Lens(q => q.useCreatedDate, (a, b) =>\n            {\n                a.useCreatedDate = b;\n                return a;\n            });\n            var createdBeforeDateLens = criteria.Lens(q => q.createdBefore, (a, b) =>\n            {\n                a.createdBefore = b;\n                return a;\n            });\n            var createdAfterDateLens = criteria.Lens(q => q.createdAfter, (a, b) =>\n            {\n                a.createdBefore = b;\n                return a;\n            });\n            var createdBeforeTimeLens = criteria.Lens(q => q.createdBeforeTime, (a, b) =>\n            {\n                a.createdBeforeTime = b;\n                return a;\n            });\n            var createdAfterTimeLens = criteria.Lens(q => q.createdAfterTime, (a, b) =>\n            {\n                a.createdAfterTime = b;\n                return a;\n            });\n            var useAttemptedDTLens = criteria.Lens(q => q.useLastAttemptDate, (a, b) =>\n            {\n                a.useLastAttemptDate = b;\n                return a;\n            });\n            var lastExecutedBeforeTimeLens = criteria.Lens(q => q.attemptedBeforeTime, (a, b) =>\n            {\n                a.attemptedBeforeTime = b;\n                return a;\n            });\n            var lastExecutedBeforeDateLens = criteria.Lens(q => q.attemptedBeforeDate, (a, b) =>\n            {\n                a.attemptedBeforeDate = b;\n                return a;\n            });\n            var lastExecutedAfterTimeLens = criteria.Lens(q => q.attemptedAfterTime, (a, b) =>\n            {\n                a.attemptedAfterTime = b;\n                return a;\n            });\n            var lastExecutedAfterDateLens = criteria.Lens(q => q.attemptedAfterDate, (a, b) =>\n            {\n                a.attemptedAfterDate = b;\n                return a;\n            });\n           /* WebSharper.Html.Client.Operators.OnAfterRender(\n                f: FSharpConvert.Fun<Datepicker>(d =>\n                {\n                    d.SetDate(DateTime.Now.ToShortDateString());\n                }),\n                w: createdFilter);*/\n            var content = div(\n                    div(\"Queue Name: \",@select(queueNameLens, queueNameView, (q) => q ?? \"Please Select a Queue...\"),on.change((r,e)=> submit.Trigger()), attr.name(\"queueNameSelect\")),\n                    TextSearch(\"Method Name\", methodLens,useMethod),\n                    OptionSearch(\"Status\", statusLens, statusOptions.View, useStatus, (a,b)=>submit.Trigger()),\n                    OptionSearch(\"Method\", methodLens, methodCriteria.View, useMethod,(a,b)=> submit.Trigger()),\n                    DateTimeRangeSearch(\"Created\", useCreatedLens, createdBeforeDateLens, createdBeforeTimeLens, createdAfterDateLens, createdAfterTimeLens),\n                    DateTimeRangeSearch(\"Attempt\", useAttemptedDTLens, lastExecutedBeforeDateLens, lastExecutedBeforeTimeLens, lastExecutedAfterDateLens, lastExecutedAfterTimeLens),\n                    br(),\n                    button(\"Search\", submit.Trigger),\n                    div(results)\n                );\n                \n            return content;\n        }\n    }\n    [JavaScript]\n    public static class Client\n    {\n        static public IControlBody Main()\n        {\n\n            var rvInput = Var.Create(new JobSearchCriteria());\n            var submit = Submitter.CreateOption(rvInput.View);\n            var vReversed =\n                submit.View.MapAsync(input =>\n                {\n                    if (input == null)\n                        return Task.FromResult(\"\");\n                    return Remoting.DoSomething(input.Value);\n                });\n            return div(\n                input(rvInput),\n                button(\"Send\", submit.Trigger),\n                hr(),\n                h4(\n                    attr.@class(\"text-muted\"),\n                    \"The server responded:\",\n                    div(\n                        attr.@class(\"jumbotron\"),\n                        h1(vReversed)\n                    )\n                )\n            );\n        }\n        /*static public IControlBody Main()\n        {\n            var rvInput = Var.Create(\"\");\n            var submit = Submitter.CreateOption(rvInput.View);\n            var vReversed =\n                submit.View.MapAsync(input =>\n                {\n                    if (input == null)\n                        return Task.FromResult(\"\");\n                    return Remoting.DoSomething(input.Value);\n                });\n            return div(\n                input(rvInput),\n                button(\"Send\", submit.Trigger),\n                hr(),\n                h4(\n                    attr.@class(\"text-muted\"),\n                    \"The server responded:\",\n                    div(\n                        attr.@class(\"jumbotron\"),\n                        h1(vReversed)\n                    )\n                )\n            );\n        }*/\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Jobitem\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobitem\", null, FSharpOption<string>.Some(\"JobItem.html\"), \"<!-- ClientLoad = Inline -->\\r\\n\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        public class JobItem\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public JobItem JobGuid(string x) { holes.Add(TemplateHole.NewText(\"jobguid\", x)); return this; }\n            public JobItem JobGuid(View<string> x) { holes.Add(TemplateHole.NewTextView(\"jobguid\", x)); return this; }\n            public JobItem MethodName(string x) { holes.Add(TemplateHole.NewText(\"methodname\", x)); return this; }\n            public JobItem MethodName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"methodname\", x)); return this; }\n            public JobItem QueueName(string x) { holes.Add(TemplateHole.NewText(\"queuename\", x)); return this; }\n            public JobItem QueueName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"queuename\", x)); return this; }\n            public JobItem Status(string x) { holes.Add(TemplateHole.NewText(\"status\", x)); return this; }\n            public JobItem Status(View<string> x) { holes.Add(TemplateHole.NewTextView(\"status\", x)); return this; }\n            public JobItem JobParameter(Doc x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", x)); return this; }\n            public JobItem JobParameter(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", SDoc.Concat(x))); return this; }\n            public JobItem JobParameter(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", SDoc.Concat(x))); return this; }\n            public JobItem JobParameter(string x) { holes.Add(TemplateHole.NewText(\"jobparameter\", x)); return this; }\n            public JobItem JobParameter(View<string> x) { holes.Add(TemplateHole.NewTextView(\"jobparameter\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobitem\", FSharpOption<string>.Some(\"jobitem\"), FSharpOption<string>.Some(\"JobItem.html\"), \"<li>\\r\\n    <div class=\\\"Jobs\\\">\\r\\n        <div>JobGuid: <input value=\\\"${JobGuid}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div>MethodName: <input value=\\\"${MethodName}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"> </div>\\r\\n        <div>QueueName: <input value=\\\"${QueueName}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div>Status: <input value=\\\"${Status}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div ws-hole=\\\"JobParameter\\\"></div>\\r\\n    </div>\\r\\n</li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Jobparameter\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobparameter\", null, FSharpOption<string>.Some(\"JobParameter.html\"), \"<!-- ClientLoad = Inline -->\\r\\n\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        public class JobParameter\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public JobParameter Ordinal(string x) { holes.Add(TemplateHole.NewText(\"ordinal\", x)); return this; }\n            public JobParameter Ordinal(View<string> x) { holes.Add(TemplateHole.NewTextView(\"ordinal\", x)); return this; }\n            public JobParameter Name(string x) { holes.Add(TemplateHole.NewText(\"name\", x)); return this; }\n            public JobParameter Name(View<string> x) { holes.Add(TemplateHole.NewTextView(\"name\", x)); return this; }\n            public JobParameter Type(string x) { holes.Add(TemplateHole.NewText(\"type\", x)); return this; }\n            public JobParameter Type(View<string> x) { holes.Add(TemplateHole.NewTextView(\"type\", x)); return this; }\n            public JobParameter Value(string x) { holes.Add(TemplateHole.NewText(\"value\", x)); return this; }\n            public JobParameter Value(View<string> x) { holes.Add(TemplateHole.NewTextView(\"value\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobparameter\", FSharpOption<string>.Some(\"jobparameter\"), FSharpOption<string>.Some(\"JobParameter.html\"), \"<li>\\r\\n    <div class=\\\"JobParameter\\\">\\r\\n        <div>Ordinal : <input readonly=\\\"readonly\\\" value=\\\"${Ordinal}\\\"> </div> <div>Name: <input value=\\\"${Name}\\\" readonly=\\\"readonly\\\"> </div> <div>Type: <input value=\\\"${Type}\\\" readonly=\\\"readonly\\\"> </div> <div>Value: <input value=\\\"${Value}\\\" readonly=\\\"readonly\\\"></div>\\r\\n    </div>\\r\\n</li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Jobsearch\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobsearch\", null, FSharpOption<string>.Some(\"JobSearch.html\"), \"<html lang=\\\"en\\\">\\r\\n<body>\\r\\n    <div style=\\\"width: 400px\\\">\\r\\n        <h1>My TODO list</h1>\\r\\n        <div id=\\\"search\\\"></div>\\r\\n        <div style=\\\"display: none\\\"></div>\\r\\n    </div>\\r\\n</body>\\r\\n</html>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        [Inline] public Elt Elt() => (Elt)Doc();\n        public class ListItem\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public ListItem ShowDone(Attr x) { holes.Add(TemplateHole.NewAttribute(\"showdone\", x)); return this; }\n            public ListItem ShowDone(IEnumerable<Attr> x) { holes.Add(TemplateHole.NewAttribute(\"showdone\", Attr.Concat(x))); return this; }\n            public ListItem ShowDone(params Attr[] x) { holes.Add(TemplateHole.NewAttribute(\"showdone\", Attr.Concat(x))); return this; }\n            public ListItem Job(string x) { holes.Add(TemplateHole.NewText(\"job\", x)); return this; }\n            public ListItem Job(View<string> x) { holes.Add(TemplateHole.NewTextView(\"job\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobsearch\", FSharpOption<string>.Some(\"listitem\"), FSharpOption<string>.Some(\"JobSearch.html\"), \"<li>\\r\\n                    <div class=\\\"checkbox\\\">\\r\\n                        <label ws-attr=\\\"ShowDone\\\">\\r\\n                            <!--<input type=\\\"checkbox\\\" ws-var=\\\"Done\\\" />-->\\r\\n                            ${Job}\\r\\n                            <!--<button class=\\\"btn btn-danger btn-xs pull-right\\\" type=\\\"button\\\" ws-onclick=\\\"Clear\\\">X</button>-->\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n        public class Main\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public Main ListContainer(Doc x) { holes.Add(TemplateHole.NewElt(\"listcontainer\", x)); return this; }\n            public Main ListContainer(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"listcontainer\", SDoc.Concat(x))); return this; }\n            public Main ListContainer(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"listcontainer\", SDoc.Concat(x))); return this; }\n            public Main ListContainer(string x) { holes.Add(TemplateHole.NewText(\"listcontainer\", x)); return this; }\n            public Main ListContainer(View<string> x) { holes.Add(TemplateHole.NewTextView(\"listcontainer\", x)); return this; }\n            public Main SearchQueueName(Var<string> x) { holes.Add(TemplateHole.NewVarStr(\"searchqueuename\", x)); return this; }\n            public Main SearchMethodName(Var<string> x) { holes.Add(TemplateHole.NewVarStr(\"searchmethodname\", x)); return this; }\n            public Main Search(Action<DomElement, WebSharper.JavaScript.Dom.MouseEvent> x) { holes.Add(TemplateHole.NewActionEvent(\"search\", x)); return this; }\n            public Main Search(Action x) { holes.Add(TemplateHole.NewEvent(\"search\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x()))); return this; }\n            public Main Search(Action<WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>> x) { holes.Add(TemplateHole.NewEvent(\"search\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x(new WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>(new Vars(instance), a, (WebSharper.JavaScript.Dom.MouseEvent)b))))); return this; }\n            public Main NewTaskName(string x) { holes.Add(TemplateHole.NewText(\"newtaskname\", x)); return this; }\n            public Main NewTaskName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"newtaskname\", x)); return this; }\n            public Main Clear(Action<DomElement, WebSharper.JavaScript.Dom.MouseEvent> x) { holes.Add(TemplateHole.NewActionEvent(\"clear\", x)); return this; }\n            public Main Clear(Action x) { holes.Add(TemplateHole.NewEvent(\"clear\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x()))); return this; }\n            public Main Clear(Action<WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>> x) { holes.Add(TemplateHole.NewEvent(\"clear\", FSharpConvert.Fun<DomElement, DomEvent>((a,b) => x(new WebSharper.UI.Templating.Runtime.Server.TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent>(new Vars(instance), a, (WebSharper.JavaScript.Dom.MouseEvent)b))))); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n                [Inline] public Var<string> SearchQueueName => (Var<string>)TemplateHole.Value(instance.Hole(\"searchqueuename\"));\n                [Inline] public Var<string> SearchMethodName => (Var<string>)TemplateHole.Value(instance.Hole(\"searchmethodname\"));\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] { Tuple.Create(\"searchqueuename\", WebSharper.UI.Templating.Runtime.Server.ValTy.String), Tuple.Create(\"searchmethodname\", WebSharper.UI.Templating.Runtime.Server.ValTy.String) });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"jobsearch\", FSharpOption<string>.Some(\"main\"), FSharpOption<string>.Some(\"JobSearch.html\"), \"\\r\\n            <ul class=\\\"list-unstyled\\\" ws-hole=\\\"ListContainer\\\">\\r\\n                \\r\\n            </ul>\\r\\n            <form onsubmit=\\\"return false\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label>New task</label>\\r\\n                    <div class=\\\"input-group\\\">\\r\\n                        <input class=\\\"form-control\\\" ws-var=\\\"SearchQueueName\\\">\\r\\n                        <input class=\\\"form-control\\\" ws-var=\\\"SearchMethodName\\\">\\r\\n                        <span class=\\\"input-group-btn\\\">\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ws-onclick=\\\"Search\\\">Search</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                    <p class=\\\"help-block\\\">You are going to add: ${NewTaskName}<span></span></p>\\r\\n                </div>\\r\\n                <button class=\\\"btn btn-default\\\" type=\\\"button\\\" ws-onclick=\\\"Clear\\\">Clear Criteria</button>\\r\\n            </form>\\r\\n        \", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n        }\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Main\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public Main Title(string x) { holes.Add(TemplateHole.NewText(\"title\", x)); return this; }\n        public Main Title(View<string> x) { holes.Add(TemplateHole.NewTextView(\"title\", x)); return this; }\n        public Main MenuBar(Doc x) { holes.Add(TemplateHole.NewElt(\"menubar\", x)); return this; }\n        public Main MenuBar(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"menubar\", SDoc.Concat(x))); return this; }\n        public Main MenuBar(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"menubar\", SDoc.Concat(x))); return this; }\n        public Main MenuBar(string x) { holes.Add(TemplateHole.NewText(\"menubar\", x)); return this; }\n        public Main MenuBar(View<string> x) { holes.Add(TemplateHole.NewTextView(\"menubar\", x)); return this; }\n        public Main Body(Doc x) { holes.Add(TemplateHole.NewElt(\"body\", x)); return this; }\n        public Main Body(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"body\", SDoc.Concat(x))); return this; }\n        public Main Body(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"body\", SDoc.Concat(x))); return this; }\n        public Main Body(string x) { holes.Add(TemplateHole.NewText(\"body\", x)); return this; }\n        public Main Body(View<string> x) { holes.Add(TemplateHole.NewTextView(\"body\", x)); return this; }\n        public Main scripts(Doc x) { holes.Add(TemplateHole.NewElt(\"scripts\", x)); return this; }\n        public Main scripts(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"scripts\", SDoc.Concat(x))); return this; }\n        public Main scripts(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"scripts\", SDoc.Concat(x))); return this; }\n        public Main scripts(string x) { holes.Add(TemplateHole.NewText(\"scripts\", x)); return this; }\n        public Main scripts(View<string> x) { holes.Add(TemplateHole.NewTextView(\"scripts\", x)); return this; }\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"main\", null, FSharpOption<string>.Some(\"Main.html\"), \"<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>${Title}</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\\\">\\n    <style>\\n        /* Sticky footer styles */\\n        html {\\n            position: relative;\\n            min-height: 100%;\\n        }\\n\\n        body {\\n            /* Margin bottom by footer height */\\n            margin-bottom: 60px;\\n        }\\n\\n        .footer {\\n            position: absolute;\\n            bottom: 0;\\n            width: 100%;\\n            /* Set the fixed height of the footer here */\\n            height: 60px;\\n            background-color: #f5f5f5;\\n        }\\n\\n        .container .text-muted {\\n            margin: 20px 0;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <!-- Static navbar -->\\n    <nav class=\\\"navbar navbar-default navbar-static-top\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"navbar-header\\\">\\n                <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbar\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n                    <span class=\\\"sr-only\\\">Toggle navigation</span>\\n                    <span class=\\\"icon-bar\\\"></span>\\n                    <span class=\\\"icon-bar\\\"></span>\\n                </button>\\n                <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Your App</a>\\n            </div>\\n            <div id=\\\"navbar\\\" class=\\\"navbar-collapse collapse\\\">\\n                <ul class=\\\"nav navbar-nav\\\" ws-hole=\\\"MenuBar\\\"></ul>\\n                <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                    <li><a href=\\\"http://websharper.com\\\">websharper.com</a></li>\\n                </ul>\\n            </div><!--/.nav-collapse -->\\n        </div>\\n    </nav>\\n    <div class=\\\"container\\\">\\n        <div ws-replace=\\\"Body\\\">\\n        </div>\\n    </div>\\n    <footer class=\\\"footer\\\">\\n        <div class=\\\"container\\\">\\n            <p class=\\\"text-muted\\\">\\n                For an enhanced template that provides automatic GitHub deployment to Azure, fork from <a href=\\\"https://github.com/intellifactory/ClientServer.Azure\\\">GitHub</a>, or\\n                read more <a href=\\\"http://websharper.com/blog-entry/4368/deploying-websharper-apps-to-azure-via-github\\\">here</a>.\\n            </p>\\n        </div>\\n    </footer>\\n    <script ws-replace=\\\"scripts\\\"></script>\\n</body>\\n</html>\", null, completed.Item1, FSharpOption<string>.Some(\"main\"), ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        [Inline] public Elt Elt() => (Elt)Doc();\n    }\n}", "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.FSharp.Core;\nusing WebSharper;\nusing WebSharper.UI;\nusing WebSharper.UI.Templating;\nusing SDoc = WebSharper.UI.Doc;\nusing DomElement = WebSharper.JavaScript.Dom.Element;\nusing DomEvent = WebSharper.JavaScript.Dom.Event;\nnamespace GlutenFree.OddJob.Manager.Presentation.WS.Template\n{\n    [JavaScript]\n    public class Searchoption\n    {\n        string key = System.Guid.NewGuid().ToString();\n        List<TemplateHole> holes = new List<TemplateHole>();\n        Instance instance;\n        public struct Vars\n        {\n            public Vars(Instance i) { instance = i; }\n            readonly Instance instance;\n        }\n        public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n        {\n            public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n            public Vars Vars => new Vars(this);\n        }\n        public Instance Create() {\n            var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n            var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"searchoption\", null, FSharpOption<string>.Some(\"SearchOption.html\"), \"<!-- ClientLoad = Inline -->\\r\\n\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, false, false, false);\n            instance = new Instance(completed.Item2, doc);\n            return instance;\n        }\n        public Doc Doc() => Create().Doc;\n        public class SearchOption\n        {\n            string key = System.Guid.NewGuid().ToString();\n            List<TemplateHole> holes = new List<TemplateHole>();\n            Instance instance;\n            public SearchOption JobGuid(string x) { holes.Add(TemplateHole.NewText(\"jobguid\", x)); return this; }\n            public SearchOption JobGuid(View<string> x) { holes.Add(TemplateHole.NewTextView(\"jobguid\", x)); return this; }\n            public SearchOption MethodName(string x) { holes.Add(TemplateHole.NewText(\"methodname\", x)); return this; }\n            public SearchOption MethodName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"methodname\", x)); return this; }\n            public SearchOption QueueName(string x) { holes.Add(TemplateHole.NewText(\"queuename\", x)); return this; }\n            public SearchOption QueueName(View<string> x) { holes.Add(TemplateHole.NewTextView(\"queuename\", x)); return this; }\n            public SearchOption Status(string x) { holes.Add(TemplateHole.NewText(\"status\", x)); return this; }\n            public SearchOption Status(View<string> x) { holes.Add(TemplateHole.NewTextView(\"status\", x)); return this; }\n            public SearchOption JobParameter(Doc x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", x)); return this; }\n            public SearchOption JobParameter(IEnumerable<Doc> x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", SDoc.Concat(x))); return this; }\n            public SearchOption JobParameter(params Doc[] x) { holes.Add(TemplateHole.NewElt(\"jobparameter\", SDoc.Concat(x))); return this; }\n            public SearchOption JobParameter(string x) { holes.Add(TemplateHole.NewText(\"jobparameter\", x)); return this; }\n            public SearchOption JobParameter(View<string> x) { holes.Add(TemplateHole.NewTextView(\"jobparameter\", x)); return this; }\n            public struct Vars\n            {\n                public Vars(Instance i) { instance = i; }\n                readonly Instance instance;\n            }\n            public class Instance : WebSharper.UI.Templating.Runtime.Server.TemplateInstance\n            {\n                public Instance(WebSharper.UI.Templating.Runtime.Server.CompletedHoles v, Doc d) : base(v, d) { }\n                public Vars Vars => new Vars(this);\n            }\n            public Instance Create() {\n                var completed = WebSharper.UI.Templating.Runtime.Server.Handler.CompleteHoles(key, holes, new Tuple<string, WebSharper.UI.Templating.Runtime.Server.ValTy>[] {  });\n                var doc = WebSharper.UI.Templating.Runtime.Server.Runtime.GetOrLoadTemplate(\"searchoption\", FSharpOption<string>.Some(\"searchoption\"), FSharpOption<string>.Some(\"SearchOption.html\"), \"<li>\\r\\n    <div class=\\\"searchOpt\\\">\\r\\n        <select></select>\\r\\n    </div>\\r\\n    <div class=\\\"Jobs\\\">\\r\\n        <div>JobGuid: <input value=\\\"${JobGuid}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div>MethodName: <input value=\\\"${MethodName}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"> </div>\\r\\n        <div>QueueName: <input value=\\\"${QueueName}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div>Status: <input value=\\\"${Status}\\\" readonly=\\\"readonly\\\" size=\\\"40\\\"></div>\\r\\n        <div ws-hole=\\\"JobParameter\\\"></div>\\r\\n    </div>\\r\\n</li>\", null, completed.Item1, null, ServerLoad.WhenChanged, new Tuple<string, FSharpOption<string>, string>[] {  }, null, true, false, false);\n                instance = new Instance(completed.Item2, doc);\n                return instance;\n            }\n            public Doc Doc() => Create().Doc;\n            [Inline] public Elt Elt() => (Elt)Doc();\n        }\n    }\n}"],
"names": [],
"mappings": "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"
}
